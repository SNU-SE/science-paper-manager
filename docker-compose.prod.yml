# Production Docker Compose configuration
version: '3.8'

services:
  # Redis with persistence and security
  redis:
    image: redis:7-alpine
    container_name: science-paper-redis-prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Main web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: science-paper-web-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - WEBSOCKET_PORT=3001
    env_file:
      - .env.production.local
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - backup_prod_data:/var/backups/science-paper-manager
      - log_prod_data:/var/log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Background worker processes (scaled)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
      args:
        - NODE_ENV=production
    restart: always
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-10}
    env_file:
      - .env.production.local
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - log_prod_data:/var/log
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "node", "-e", "const Redis = require('ioredis'); const redis = new Redis(process.env.REDIS_URL); redis.ping().then(() => process.exit(0)).catch(() => process.exit(1));"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s

  # WebSocket server
  websocket:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: science-paper-websocket-prod
    restart: always
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - WEBSOCKET_ENABLED=true
      - WEBSOCKET_PORT=3001
    env_file:
      - .env.production.local
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - log_prod_data:/var/log
    command: ["node", "-e", "require('./src/lib/websocket-server.ts')"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: science-paper-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - log_prod_data:/var/log/nginx
    depends_on:
      - web
      - websocket
    profiles:
      - nginx

volumes:
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/science-paper-manager/redis-data
  backup_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/science-paper-manager/backups
  log_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/science-paper-manager/logs

networks:
  default:
    name: science-paper-prod-network
    driver: bridge